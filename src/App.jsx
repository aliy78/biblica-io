import { useEffect, useState } from "react";

export default function App() {
  const [bibleData, setBibleData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");

  useEffect(() => {
    fetch(process.env.PUBLIC_URL + "/biblie.json")
      .then((res) => {
        if (!res.ok) throw new Error("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω");
        return res.json();
      })
      .then((data) => {
        // –ï—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∫–ª—é—á–∞ Books
        const books = data.Books || data;
        setBibleData(books);
        setLoading(false);
      })
      .catch((err) => {
        console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", err.message);
        setError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å biblie.json");
        setLoading(false);
      });
  }, []);

  return (
    <div style={{ padding: "20px", fontFamily: "sans-serif" }}>
      <h1 style={{ fontSize: "24px", marginBottom: "10px" }}>üìò Biblica.io ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞</h1>

      {loading && <p>‚è≥ –ó–∞–≥—Ä—É–∑–∫–∞...</p>}
      {error && <p style={{ color: "red" }}>{error}</p>}

      {bibleData.length > 0 ? (
        <pre style={{ background: "#f4f4f4", padding: "10px", borderRadius: "6px" }}>
          {JSON.stringify(bibleData, null, 2)}
        </pre>
      ) : !loading && !error ? (
        <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>
      ) : null}
    </div>
  );
}
